/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUser } from '../fn/users/delete-user';
import { DeleteUser$Params } from '../fn/users/delete-user';
import { getAllUsers } from '../fn/users/get-all-users';
import { GetAllUsers$Params } from '../fn/users/get-all-users';
import { getLoggedUser } from '../fn/users/get-logged-user';
import { GetLoggedUser$Params } from '../fn/users/get-logged-user';
import { getPageOfUsers } from '../fn/users/get-page-of-users';
import { GetPageOfUsers$Params } from '../fn/users/get-page-of-users';
import { getPageOfUsersByRole } from '../fn/users/get-page-of-users-by-role';
import { GetPageOfUsersByRole$Params } from '../fn/users/get-page-of-users-by-role';
import { getUserById } from '../fn/users/get-user-by-id';
import { GetUserById$Params } from '../fn/users/get-user-by-id';
import { IdResponse } from '../models/id-response';
import { PageResponseUserResponse } from '../models/page-response-user-response';
import { searchByUsername } from '../fn/users/search-by-username';
import { SearchByUsername$Params } from '../fn/users/search-by-username';
import { toggleLockStatus } from '../fn/users/toggle-lock-status';
import { ToggleLockStatus$Params } from '../fn/users/toggle-lock-status';
import { updateProfile } from '../fn/users/update-profile';
import { UpdateProfile$Params } from '../fn/users/update-profile';
import { updateSelfProfile } from '../fn/users/update-self-profile';
import { UpdateSelfProfile$Params } from '../fn/users/update-self-profile';
import { uploadProfilePicture } from '../fn/users/upload-profile-picture';
import { UploadProfilePicture$Params } from '../fn/users/upload-profile-picture';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `toggleLockStatus()` */
  static readonly ToggleLockStatusPath = '/users/toggle-lock-status/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toggleLockStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleLockStatus$Response(params: ToggleLockStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return toggleLockStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toggleLockStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleLockStatus(params: ToggleLockStatus$Params, context?: HttpContext): Observable<string> {
    return this.toggleLockStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updateSelfProfile()` */
  static readonly UpdateSelfProfilePath = '/users/update-self-profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSelfProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSelfProfile$Response(params: UpdateSelfProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<IdResponse>> {
    return updateSelfProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSelfProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSelfProfile(params: UpdateSelfProfile$Params, context?: HttpContext): Observable<IdResponse> {
    return this.updateSelfProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<IdResponse>): IdResponse => r.body)
    );
  }

  /** Path part for operation `updateProfile()` */
  static readonly UpdateProfilePath = '/users/update-profile/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProfile$Response(params: UpdateProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<IdResponse>> {
    return updateProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProfile(params: UpdateProfile$Params, context?: HttpContext): Observable<IdResponse> {
    return this.updateProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<IdResponse>): IdResponse => r.body)
    );
  }

  /** Path part for operation `uploadProfilePicture()` */
  static readonly UploadProfilePicturePath = '/users/profile-picture/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadProfilePicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadProfilePicture$Response(params: UploadProfilePicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadProfilePicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadProfilePicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadProfilePicture(params: UploadProfilePicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadProfilePicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/users/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Response(params: GetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById(params: GetUserById$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/users/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `searchByUsername()` */
  static readonly SearchByUsernamePath = '/users/search/name/{user-name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchByUsername()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByUsername$Response(params: SearchByUsername$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return searchByUsername(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchByUsername$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchByUsername(params: SearchByUsername$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.searchByUsername$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `getPageOfUsersByRole()` */
  static readonly GetPageOfUsersByRolePath = '/users/role/page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfUsersByRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfUsersByRole$Response(params: GetPageOfUsersByRole$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserResponse>> {
    return getPageOfUsersByRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfUsersByRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfUsersByRole(params: GetPageOfUsersByRole$Params, context?: HttpContext): Observable<PageResponseUserResponse> {
    return this.getPageOfUsersByRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserResponse>): PageResponseUserResponse => r.body)
    );
  }

  /** Path part for operation `getPageOfUsers()` */
  static readonly GetPageOfUsersPath = '/users/page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfUsers$Response(params?: GetPageOfUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserResponse>> {
    return getPageOfUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfUsers(params?: GetPageOfUsers$Params, context?: HttpContext): Observable<PageResponseUserResponse> {
    return this.getPageOfUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserResponse>): PageResponseUserResponse => r.body)
    );
  }

  /** Path part for operation `getLoggedUser()` */
  static readonly GetLoggedUserPath = '/users/logged';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLoggedUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLoggedUser$Response(params?: GetLoggedUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getLoggedUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLoggedUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLoggedUser(params?: GetLoggedUser$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getLoggedUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

}
