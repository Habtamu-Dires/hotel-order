/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteLocationById } from '../fn/locations/delete-location-by-id';
import { DeleteLocationById$Params } from '../fn/locations/delete-location-by-id';
import { getAllOrderLocations } from '../fn/locations/get-all-order-locations';
import { GetAllOrderLocations$Params } from '../fn/locations/get-all-order-locations';
import { getAvailableRooms } from '../fn/locations/get-available-rooms';
import { GetAvailableRooms$Params } from '../fn/locations/get-available-rooms';
import { getLocationById } from '../fn/locations/get-location-by-id';
import { GetLocationById$Params } from '../fn/locations/get-location-by-id';
import { getPageOfLocationByType } from '../fn/locations/get-page-of-location-by-type';
import { GetPageOfLocationByType$Params } from '../fn/locations/get-page-of-location-by-type';
import { getPageOfLocations } from '../fn/locations/get-page-of-locations';
import { GetPageOfLocations$Params } from '../fn/locations/get-page-of-locations';
import { IdResponse } from '../models/id-response';
import { LocationResponse } from '../models/location-response';
import { PageResponseLocationResponse } from '../models/page-response-location-response';
import { saveOrderLocation } from '../fn/locations/save-order-location';
import { SaveOrderLocation$Params } from '../fn/locations/save-order-location';
import { searchLocationByNumber } from '../fn/locations/search-location-by-number';
import { SearchLocationByNumber$Params } from '../fn/locations/search-location-by-number';
import { updateRoomStatus } from '../fn/locations/update-room-status';
import { UpdateRoomStatus$Params } from '../fn/locations/update-room-status';

@Injectable({ providedIn: 'root' })
export class LocationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRoomStatus()` */
  static readonly UpdateRoomStatusPath = '/locations/rooms/update-status/{room-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoomStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoomStatus$Response(params: UpdateRoomStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateRoomStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoomStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoomStatus(params: UpdateRoomStatus$Params, context?: HttpContext): Observable<string> {
    return this.updateRoomStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllOrderLocations()` */
  static readonly GetAllOrderLocationsPath = '/locations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrderLocations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrderLocations$Response(params?: GetAllOrderLocations$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<LocationResponse>>> {
    return getAllOrderLocations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrderLocations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrderLocations(params?: GetAllOrderLocations$Params, context?: HttpContext): Observable<Array<LocationResponse>> {
    return this.getAllOrderLocations$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<LocationResponse>>): Array<LocationResponse> => r.body)
    );
  }

  /** Path part for operation `saveOrderLocation()` */
  static readonly SaveOrderLocationPath = '/locations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveOrderLocation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveOrderLocation$Response(params: SaveOrderLocation$Params, context?: HttpContext): Observable<StrictHttpResponse<IdResponse>> {
    return saveOrderLocation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveOrderLocation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveOrderLocation(params: SaveOrderLocation$Params, context?: HttpContext): Observable<IdResponse> {
    return this.saveOrderLocation$Response(params, context).pipe(
      map((r: StrictHttpResponse<IdResponse>): IdResponse => r.body)
    );
  }

  /** Path part for operation `getLocationById()` */
  static readonly GetLocationByIdPath = '/locations/{location-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLocationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLocationById$Response(params: GetLocationById$Params, context?: HttpContext): Observable<StrictHttpResponse<LocationResponse>> {
    return getLocationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLocationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLocationById(params: GetLocationById$Params, context?: HttpContext): Observable<LocationResponse> {
    return this.getLocationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<LocationResponse>): LocationResponse => r.body)
    );
  }

  /** Path part for operation `deleteLocationById()` */
  static readonly DeleteLocationByIdPath = '/locations/{location-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteLocationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteLocationById$Response(params: DeleteLocationById$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteLocationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteLocationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteLocationById(params: DeleteLocationById$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteLocationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `searchLocationByNumber()` */
  static readonly SearchLocationByNumberPath = '/locations/search/number/{location-number}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchLocationByNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchLocationByNumber$Response(params: SearchLocationByNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<LocationResponse>>> {
    return searchLocationByNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchLocationByNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchLocationByNumber(params: SearchLocationByNumber$Params, context?: HttpContext): Observable<Array<LocationResponse>> {
    return this.searchLocationByNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<LocationResponse>>): Array<LocationResponse> => r.body)
    );
  }

  /** Path part for operation `getAvailableRooms()` */
  static readonly GetAvailableRoomsPath = '/locations/rooms/available';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms$Response(params?: GetAvailableRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<LocationResponse>>> {
    return getAvailableRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms(params?: GetAvailableRooms$Params, context?: HttpContext): Observable<Array<LocationResponse>> {
    return this.getAvailableRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<LocationResponse>>): Array<LocationResponse> => r.body)
    );
  }

  /** Path part for operation `getPageOfLocations()` */
  static readonly GetPageOfLocationsPath = '/locations/page';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfLocations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfLocations$Response(params?: GetPageOfLocations$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLocationResponse>> {
    return getPageOfLocations(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfLocations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfLocations(params?: GetPageOfLocations$Params, context?: HttpContext): Observable<PageResponseLocationResponse> {
    return this.getPageOfLocations$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLocationResponse>): PageResponseLocationResponse => r.body)
    );
  }

  /** Path part for operation `getPageOfLocationByType()` */
  static readonly GetPageOfLocationByTypePath = '/locations/page/{location-type}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPageOfLocationByType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfLocationByType$Response(params: GetPageOfLocationByType$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseLocationResponse>> {
    return getPageOfLocationByType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPageOfLocationByType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPageOfLocationByType(params: GetPageOfLocationByType$Params, context?: HttpContext): Observable<PageResponseLocationResponse> {
    return this.getPageOfLocationByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseLocationResponse>): PageResponseLocationResponse => r.body)
    );
  }

}
