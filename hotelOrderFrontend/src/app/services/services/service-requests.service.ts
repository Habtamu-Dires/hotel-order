/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createServiceRequest } from '../fn/service-requests/create-service-request';
import { CreateServiceRequest$Params } from '../fn/service-requests/create-service-request';
import { getAllServiceRequests } from '../fn/service-requests/get-all-service-requests';
import { GetAllServiceRequests$Params } from '../fn/service-requests/get-all-service-requests';
import { getPendingServiceRequests } from '../fn/service-requests/get-pending-service-requests';
import { GetPendingServiceRequests$Params } from '../fn/service-requests/get-pending-service-requests';
import { MessageResponse } from '../models/message-response';
import { ServiceRequestResponse } from '../models/service-request-response';
import { updateServiceRequestStatus } from '../fn/service-requests/update-service-request-status';
import { UpdateServiceRequestStatus$Params } from '../fn/service-requests/update-service-request-status';

@Injectable({ providedIn: 'root' })
export class ServiceRequestsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateServiceRequestStatus()` */
  static readonly UpdateServiceRequestStatusPath = '/service-requests/update-status/{request_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateServiceRequestStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateServiceRequestStatus$Response(params: UpdateServiceRequestStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateServiceRequestStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateServiceRequestStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateServiceRequestStatus(params: UpdateServiceRequestStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.updateServiceRequestStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllServiceRequests()` */
  static readonly GetAllServiceRequestsPath = '/service-requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllServiceRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllServiceRequests$Response(params?: GetAllServiceRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceRequestResponse>>> {
    return getAllServiceRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllServiceRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllServiceRequests(params?: GetAllServiceRequests$Params, context?: HttpContext): Observable<Array<ServiceRequestResponse>> {
    return this.getAllServiceRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceRequestResponse>>): Array<ServiceRequestResponse> => r.body)
    );
  }

  /** Path part for operation `createServiceRequest()` */
  static readonly CreateServiceRequestPath = '/service-requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createServiceRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createServiceRequest$Response(params: CreateServiceRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return createServiceRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createServiceRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createServiceRequest(params: CreateServiceRequest$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.createServiceRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

  /** Path part for operation `getPendingServiceRequests()` */
  static readonly GetPendingServiceRequestsPath = '/service-requests/pending';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingServiceRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingServiceRequests$Response(params?: GetPendingServiceRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceRequestResponse>>> {
    return getPendingServiceRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingServiceRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingServiceRequests(params?: GetPendingServiceRequests$Params, context?: HttpContext): Observable<Array<ServiceRequestResponse>> {
    return this.getPendingServiceRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceRequestResponse>>): Array<ServiceRequestResponse> => r.body)
    );
  }

}
