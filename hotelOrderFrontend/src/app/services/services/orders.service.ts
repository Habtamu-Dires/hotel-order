/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOrder } from '../fn/orders/create-order';
import { CreateOrder$Params } from '../fn/orders/create-order';
import { getActiveOrders } from '../fn/orders/get-active-orders';
import { GetActiveOrders$Params } from '../fn/orders/get-active-orders';
import { getAllItemOrders } from '../fn/orders/get-all-item-orders';
import { GetAllItemOrders$Params } from '../fn/orders/get-all-item-orders';
import { getCompletedOrders } from '../fn/orders/get-completed-orders';
import { GetCompletedOrders$Params } from '../fn/orders/get-completed-orders';
import { getOrdersByLocation } from '../fn/orders/get-orders-by-location';
import { GetOrdersByLocation$Params } from '../fn/orders/get-orders-by-location';
import { getOrdersByStatus } from '../fn/orders/get-orders-by-status';
import { GetOrdersByStatus$Params } from '../fn/orders/get-orders-by-status';
import { getVerifiedOrOnProcessOrders } from '../fn/orders/get-verified-or-on-process-orders';
import { GetVerifiedOrOnProcessOrders$Params } from '../fn/orders/get-verified-or-on-process-orders';
import { IdResponse } from '../models/id-response';
import { OrderResponse } from '../models/order-response';
import { updateOrderStatus } from '../fn/orders/update-order-status';
import { UpdateOrderStatus$Params } from '../fn/orders/update-order-status';

@Injectable({ providedIn: 'root' })
export class OrdersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateOrderStatus()` */
  static readonly UpdateOrderStatusPath = '/orders/update-status/{order-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateOrderStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateOrderStatus$Response(params: UpdateOrderStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateOrderStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateOrderStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateOrderStatus(params: UpdateOrderStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.updateOrderStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllItemOrders()` */
  static readonly GetAllItemOrdersPath = '/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllItemOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllItemOrders$Response(params?: GetAllItemOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return getAllItemOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllItemOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllItemOrders(params?: GetAllItemOrders$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.getAllItemOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `createOrder()` */
  static readonly CreateOrderPath = '/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder$Response(params: CreateOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<IdResponse>> {
    return createOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder(params: CreateOrder$Params, context?: HttpContext): Observable<IdResponse> {
    return this.createOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<IdResponse>): IdResponse => r.body)
    );
  }

  /** Path part for operation `getVerifiedOrOnProcessOrders()` */
  static readonly GetVerifiedOrOnProcessOrdersPath = '/orders/verified-or-onprocess';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getVerifiedOrOnProcessOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVerifiedOrOnProcessOrders$Response(params?: GetVerifiedOrOnProcessOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return getVerifiedOrOnProcessOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getVerifiedOrOnProcessOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVerifiedOrOnProcessOrders(params?: GetVerifiedOrOnProcessOrders$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.getVerifiedOrOnProcessOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `getOrdersByLocation()` */
  static readonly GetOrdersByLocationPath = '/orders/locations/{location-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrdersByLocation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrdersByLocation$Response(params: GetOrdersByLocation$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return getOrdersByLocation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrdersByLocation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrdersByLocation(params: GetOrdersByLocation$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.getOrdersByLocation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `getCompletedOrders()` */
  static readonly GetCompletedOrdersPath = '/orders/completed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompletedOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompletedOrders$Response(params: GetCompletedOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return getCompletedOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompletedOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompletedOrders(params: GetCompletedOrders$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.getCompletedOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `getOrdersByStatus()` */
  static readonly GetOrdersByStatusPath = '/orders/by-status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrdersByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrdersByStatus$Response(params: GetOrdersByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return getOrdersByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrdersByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrdersByStatus(params: GetOrdersByStatus$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.getOrdersByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `getActiveOrders()` */
  static readonly GetActiveOrdersPath = '/orders/active';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getActiveOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getActiveOrders$Response(params?: GetActiveOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return getActiveOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getActiveOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getActiveOrders(params?: GetActiveOrders$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.getActiveOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

}
